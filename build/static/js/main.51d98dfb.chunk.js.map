{"version":3,"sources":["styles/variables.js","components/PhoneScreen/styles.js","components/Providers/Provider.js","components/PhoneScreen/PhoneScreen.js","components/ExchangeScreen/ExchangeScreen.js","components/Currency/styles.js","components/Currency/Currency.js","utils/currencyUtils.js","assets/images/currency-placeholder.png","utils/swipeCurrencies.js","components/SelectionBox/SelectionBox.js","components/OtherSelectionBox/OtherSelectionBox.js","components/infoComponents/Swap.js","components/infoComponents/Rates.js","components/TopBar/TopBar.js","App.js","index.js"],"names":["revolutBlack","revolutGrey0","revolutGrey10","revolutWhite","revolutBlue","Wrapper","styled","div","CurrencyContext","createContext","pockets","name","value","fullName","InitialState","selectedInput","firstSelectedPocket","selected","firstInput","secondSelectedPocket","secondInput","changePanelActive","active","isCalledFromTop","toggleOtherCurrencies","activeRate","reducers","state","action","type","setActiveInput","payload","setFirstCurrency","setSecondCurrency","setPanelToActive","setOtherCurrencyVisible","setFirstCurrencyValue","setSecondCurrencyValue","setActiveRate","exchange","newPockets","forEach","item","index","parseFloat","toFixed","input","Button","button","PhoneScreen","children","useContext","globalState","dispatch","isNotValid","length","isValidBottom","data-testid","disabled","style","filter","onClick","ExchangeScreen","Currency","isTopCurrency","balance","currency","isActive","CurrencyWrapper","CursorAndInput","CurrencyStyles","Balance","span","CurrencyScreen","backgroundColor","className","size","calledFromTop","toggleChangePanel","cursor","marginBottom","placeholder","color","onChange","e","test","Math","round","validateCurrency","target","dispatchActiveInput","float","exceedsBalance","swipeCurrencies","pocket","SelectionWrapper","ListElement","li","SpanElement","OtherCurrenciesImage","img","Title","h4","SelectedBox","padding","map","width","height","borderRadius","backgroundPosition","marginRight","src","CurrencyPlaceholder","alt","textAlign","InfoElement","TitleWrapper","OtherSelectionBoxStyle","OtherWrapper","SelectionSpan","OtherCountryList","ul","PocketList","OtherSelectionBox","useState","countries","setCountries","useEffect","fetch","then","res","json","paddingRight","paddingTop","checkIfExists","Object","keys","oneKey","i","getOtherCountries","Swap","position","top","transform","left","WrapperRates","Rates","fetchIndex","useCallback","rates","interval","setInterval","clearInterval","AutoExchangeWrapper","TopBar","App","useReducer","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51d98dfb.chunk.js","sourcesContent":["// Colors\r\n\r\nexport const revolutBlack = '#010101';\r\nexport const revolutGrey0 = '#1C1C1E';\r\nexport const revolutGrey10 = '#7A7A7C';\r\nexport const RevolutTopBarBlack10 = '#141414';\r\nexport const revolutKeyboardGrey = '#333335';\r\nexport const revolutKeyboardKeysGrey = '#707070';\r\nexport const revolutKeyboardKeysWhite = '#E8E8E8';\r\nexport const revolutWhite = '#FEFEFE';\r\nexport const revolutDisableBlue = '#032143';\r\nexport const revolutBlue = '#0075EB';\r\n\r\n// Font Size\r\n\r\nexport const primarySize = '16px';\r\nexport const attentionSize = '17px';\r\nexport const smallSize = '15px';\r\n\r\n// Font Weight\r\nexport const primaryBold = 600;\r\nexport const secondaryBold = 500;\r\n\r\n\r\n","import styled from \"styled-components\";\r\nimport { revolutBlack } from \"../../styles/variables\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 540px;\r\n  background-color: ${revolutBlack};\r\n  margin: 0 auto;\r\n  padding-bottom: 50px;\r\n  position: relative;\r\n  max-height: 1180px;\r\n  text-align: center;\r\n`;\r\n","import { createContext } from \"react\";\r\n\r\nexport const CurrencyContext = createContext();\r\n\r\nexport const pockets = [\r\n  {\r\n    name: \"GBP\",\r\n    value: \"1.31\",\r\n    fullName: \"British Pound\",\r\n  },\r\n  {\r\n    name: \"USD\",\r\n    value: \"500.00\",\r\n    fullName: \"US Dollar\",\r\n  },\r\n  {\r\n    name: \"EUR\",\r\n    value: \"0.00\",\r\n    fullName: \"Euro\",\r\n  },\r\n];\r\n\r\nexport const InitialState = {\r\n  selectedInput: \"primary\",\r\n  pockets: [...pockets],\r\n  firstSelectedPocket: {\r\n    ...pockets[0],\r\n    selected: false,\r\n  },\r\n  firstInput: \"\",\r\n  secondSelectedPocket: {\r\n    ...pockets[1],\r\n    selected: false,\r\n  },\r\n  secondInput: \"\",\r\n  changePanelActive: {\r\n    active: false,\r\n    isCalledFromTop: false,\r\n  },\r\n  toggleOtherCurrencies: false,\r\n  activeRate: \"1.00\",\r\n};\r\n\r\nexport const reducers = (state, action) => {\r\n  switch (action.type) {\r\n    case \"SET_ACTIVE_INPUT\":\r\n      return setActiveInput(state, action.payload);\r\n    case \"CHANGE_FIRST_CURRENCY\":\r\n      return setFirstCurrency(state, action.payload);\r\n    case \"CHANGE_SECOND_CURRENCY\":\r\n      return setSecondCurrency(state, action.payload);\r\n    case \"TOGGLE_CHANGE_PANEL\":\r\n      return setPanelToActive(state, action.payload);\r\n    case \"TOGGLE_OTHER_CURRENCIES\":\r\n      return setOtherCurrencyVisible(state);\r\n    case \"SET_FIRST_VALUE\":\r\n      return setFirstCurrencyValue(state, action.payload);\r\n    case \"SET_SECOND_VALUE\":\r\n      return setSecondCurrencyValue(state, action.payload);\r\n    case \"SET_ACTIVE_RATE\":\r\n      return setActiveRate(state, action.payload);\r\n    case \"EXCHANGE_CURRENCY\":\r\n      return exchange(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst exchange = (state, payload) => {\r\n  let newPockets;\r\n  pockets.forEach((item, index) => {\r\n    if (item.name === payload.firstSelectedPocket.name) {\r\n      pockets[index] = {\r\n        name: state.firstSelectedPocket.name,\r\n        value: (\r\n          parseFloat(state.firstSelectedPocket.value) -\r\n          parseFloat(payload.firstSelectedPocket.value)\r\n        ).toFixed(2),\r\n        selected: false,\r\n        fullName: pockets[index].fullName,\r\n      };\r\n      newPockets = pockets;\r\n    }\r\n    if (item.name === payload.secondSelectedPocket.name) {\r\n      pockets[index] = {\r\n        name: state.secondSelectedPocket.name,\r\n        value: (\r\n          parseFloat(state.secondSelectedPocket.value) +\r\n          parseFloat(payload.secondSelectedPocket.value)\r\n        ).toFixed(2),\r\n        selected: false,\r\n        fullName: pockets[index].fullName,\r\n      };\r\n      newPockets = pockets;\r\n    } else if (pockets[index].name === state.firstSelectedPocket.name) {\r\n      newPockets = [\r\n        ...pockets,\r\n        {\r\n          name: payload.secondSelectedPocket.name,\r\n          value: payload.secondSelectedPocket.value,\r\n        },\r\n      ];\r\n    }\r\n  });\r\n  return {\r\n    ...state,\r\n    pockets: newPockets,\r\n    firstSelectedPocket: {\r\n      name: state.firstSelectedPocket.name,\r\n      value: (\r\n        parseFloat(state.firstSelectedPocket.value) -\r\n        parseFloat(payload.firstSelectedPocket.value)\r\n      ).toFixed(2),\r\n      selected: false,\r\n    },\r\n    secondSelectedPocket: {\r\n      name: state.secondSelectedPocket.name,\r\n      value: (\r\n        parseFloat(state.secondSelectedPocket.value) +\r\n        parseFloat(payload.secondSelectedPocket.value)\r\n      ).toFixed(2),\r\n      selected: false,\r\n    },\r\n  };\r\n};\r\n\r\nconst setActiveInput = (state, payload) => {\r\n  let input;\r\n  if (payload === \"primary\") {\r\n    input = \"primary\";\r\n  } else {\r\n    input = \"secondary\";\r\n  }\r\n  return {\r\n    ...state,\r\n    selectedInput: input,\r\n  };\r\n};\r\n\r\nconst setFirstCurrency = (state, payload) => {\r\n  return {\r\n    ...state,\r\n    firstSelectedPocket: {\r\n      name: payload.name,\r\n      value: payload.value,\r\n      selected: false,\r\n    },\r\n  };\r\n};\r\nconst setSecondCurrency = (state, payload) => {\r\n  return {\r\n    ...state,\r\n    secondSelectedPocket: {\r\n      name: payload.name,\r\n      value: payload.value,\r\n      selected: false,\r\n    },\r\n  };\r\n};\r\n\r\nconst setPanelToActive = (state, payload) => {\r\n  return {\r\n    ...state,\r\n    firstInput: \"\",\r\n    secondInput: \"\",\r\n    changePanelActive: {\r\n      active: payload.active,\r\n      isCalledFromTop: payload.isCalledFromTop,\r\n    },\r\n  };\r\n};\r\n\r\nconst setOtherCurrencyVisible = (state) => {\r\n  return {\r\n    ...state,\r\n    toggleOtherCurrencies: !state.toggleOtherCurrencies,\r\n  };\r\n};\r\n\r\nconst setActiveRate = (state, payload) => {\r\n  return {\r\n    ...state,\r\n    activeRate: payload,\r\n  };\r\n};\r\n\r\nconst setFirstCurrencyValue = (state, payload) => {\r\n  return {\r\n    ...state,\r\n    firstInput: payload,\r\n  };\r\n};\r\n\r\nconst setSecondCurrencyValue = (state, payload) => {\r\n  return {\r\n    ...state,\r\n    secondInput: payload,\r\n  };\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Wrapper } from \"./styles\";\r\nimport { CurrencyContext } from \"../Providers/Provider\";\r\nimport { revolutBlue, revolutWhite } from \"../../styles/variables\";\r\nimport styled from \"styled-components\";\r\nconst Button = styled.button`\r\n  width: 50%;\r\n  background-color: ${revolutBlue};\r\n  border: none;\r\n  padding: 15px 0px;\r\n  border-radius: 8px;\r\n  margin-top: 20px;\r\n  color: ${revolutWhite};\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst PhoneScreen = ({ children }) => {\r\n  const { globalState, dispatch } = useContext(CurrencyContext);\r\n  const isNotValid =\r\n    globalState.firstSelectedPocket.value < globalState.firstInput ||\r\n    !globalState.firstInput.length ||\r\n    globalState.firstInput === \"0\";\r\n  const isValidBottom =\r\n    globalState.secondInput < globalState.firstSelectedPocket.value &&\r\n    globalState.secondInput.length &&\r\n    globalState.secondInput !== \"0\";\r\n  return (\r\n    <Wrapper data-testid=\"phone-screen\">\r\n      {children}\r\n      {!globalState.changePanelActive.active &&\r\n        !globalState.toggleOtherCurrencies && (\r\n          <Button\r\n            data-testid=\"phone-screen-exchange-button\"\r\n            disabled={isNotValid && !isValidBottom}\r\n            style={\r\n              isNotValid && !isValidBottom\r\n                ? {\r\n                    filter: \"brightness(0.5)\",\r\n                  }\r\n                : null\r\n            }\r\n            onClick={() => {\r\n              dispatch({\r\n                type: \"EXCHANGE_CURRENCY\",\r\n                payload: {\r\n                  firstSelectedPocket: {\r\n                    value: globalState.firstInput,\r\n                    name: globalState.firstSelectedPocket.name,\r\n                  },\r\n                  secondSelectedPocket: {\r\n                    value: globalState.secondInput,\r\n                    name: globalState.secondSelectedPocket.name,\r\n                  },\r\n                },\r\n              });\r\n              dispatch({\r\n                type: \"SET_FIRST_VALUE\",\r\n                payload: \"\",\r\n              });\r\n              dispatch({\r\n                type: \"SET_SECOND_VALUE\",\r\n                payload: \"\",\r\n              });\r\n            }}\r\n          >\r\n            Exchange\r\n          </Button>\r\n        )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nPhoneScreen.propTypes = {\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]).isRequired,\r\n};\r\n\r\nexport default PhoneScreen;\r\n","import React, { useContext } from \"react\";\r\nimport { Currency, Swap, Rates } from \"../index\";\r\nimport { CurrencyContext } from \"../Providers/Provider\";\r\n\r\nconst ExchangeScreen = () => {\r\n  const { globalState } = useContext(CurrencyContext);\r\n  return (\r\n    <div data-testid=\"exchange-screen\">\r\n      <Currency\r\n        isTopCurrency\r\n        balance={globalState.firstSelectedPocket.value}\r\n        currency={globalState.firstSelectedPocket.name}\r\n        isActive={globalState.selectedInput}\r\n      />\r\n      <Swap />\r\n      <Rates />\r\n      <Currency\r\n        balance={globalState.secondSelectedPocket.value}\r\n        currency={globalState.secondSelectedPocket.name}\r\n        isActive={globalState.selectedInput}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExchangeScreen;\r\n","import styled from \"styled-components\";\r\nimport { revolutBlue, revolutWhite } from \"../../styles/variables\";\r\n\r\nexport const CurrencyWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding-left: 50px;\r\n  padding-right: 40px;\r\n  align-items: center;\r\n  color: ${revolutWhite};\r\n  height: 225px;\r\n`;\r\nexport const CursorAndInput = styled.div`\r\n  position: relative;\r\n  & > i {\r\n    position: absolute;\r\n    width: 3px;\r\n    height: 100%;\r\n    background-color: ${revolutBlue};\r\n    right: -0.2px;\r\n    top: -2%;\r\n    animation-name: blink;\r\n    animation-duration: 800ms;\r\n    animation-iteration-count: infinite;\r\n    opacity: 1;\r\n  }\r\n\r\n  & > input {\r\n    text-align: right;\r\n    border: none;\r\n    font-size: 46px;\r\n    width: 100%;\r\n    background-color: transparent;\r\n    padding: 0;\r\n    &:focus,\r\n    &:hover {\r\n      outline: none;\r\n    }\r\n  }\r\n\r\n  & > input[type=\"number\"]::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  @keyframes blink {\r\n    from {\r\n      opacity: 1;\r\n    }\r\n    to {\r\n      opacity: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CurrencyStyles = styled.div`\r\n  width: 100%;\r\n  margin-bottom: 25px;\r\n  line-height: 1.76;\r\n\r\n  div {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .currency {\r\n    font-size: 42px;\r\n  }\r\n`;\r\nexport const Balance = styled.span`\r\n  font-size: 20px;\r\n  display: inline-block;\r\n  width: 100%;\r\n  color: #7a7a7c;\r\n  text-align: left;\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport { CurrencyContext } from \"../Providers/Provider\";\r\nimport {\r\n  dispatchActiveInput,\r\n  validateCurrency,\r\n  toggleChangePanel,\r\n} from \"../../utils/currencyUtils\";\r\n\r\n// styles\r\nimport { ShevronDown } from \"@revolut/icons\";\r\n\r\nimport {\r\n  revolutBlack,\r\n  revolutGrey0,\r\n  revolutGrey10,\r\n  revolutWhite,\r\n} from \"../../styles/variables\";\r\nimport {\r\n  CurrencyWrapper,\r\n  CursorAndInput,\r\n  CurrencyStyles,\r\n  Balance,\r\n} from \"./styles\";\r\n\r\nconst CurrencyScreen = ({ isTopCurrency, balance, currency, isActive }) => {\r\n  const { globalState, dispatch } = useContext(CurrencyContext);\r\n  const { activeRate } = globalState;\r\n\r\n  const isNotValid =\r\n    globalState.firstSelectedPocket.value < globalState.firstInput;\r\n\r\n  const exceedsBalance = () => {\r\n    if (isNotValid && isTopCurrency) {\r\n      return (\r\n        <span\r\n          style={{\r\n            float: \"right\",\r\n            color: \"#7A7A7C\",\r\n          }}\r\n          data-testid=\"exceed-balance\"\r\n        >\r\n          exceeds balance\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CurrencyWrapper\r\n      style={{\r\n        backgroundColor: isTopCurrency ? revolutBlack : revolutGrey0,\r\n      }}\r\n    >\r\n      <CurrencyStyles data-testid=\"currency\">\r\n        <div>\r\n          <span className=\"currency\">{currency}</span>\r\n          <ShevronDown\r\n            size=\"32\"\r\n            data-testid=\"shevron-down\"\r\n            onClick={() => {\r\n              toggleChangePanel(isTopCurrency, globalState, dispatch);\r\n            }}\r\n            style={{\r\n              cursor: \"pointer\",\r\n            }}\r\n          />\r\n        </div>\r\n        <Balance>Balance: {balance}</Balance>\r\n      </CurrencyStyles>\r\n      <div\r\n        style={isNotValid ? { marginBottom: \"36px\" } : { marginBottom: \"55px\" }}\r\n      >\r\n        <CursorAndInput>\r\n          <input\r\n            data-testid=\"currency-input\"\r\n            type=\"number\"\r\n            placeholder=\"0\"\r\n            style={\r\n              isNotValid && isTopCurrency\r\n                ? { color: revolutGrey10 }\r\n                : { color: revolutWhite }\r\n            }\r\n            value={\r\n              isTopCurrency ? globalState.firstInput : globalState.secondInput\r\n            }\r\n            onChange={(e) =>\r\n              validateCurrency(\r\n                e.target.value,\r\n                isTopCurrency,\r\n                activeRate,\r\n                dispatch\r\n              )\r\n            }\r\n            onClick={() => {\r\n              dispatchActiveInput(isTopCurrency, dispatch);\r\n            }}\r\n          />\r\n          {isActive === \"primary\" && isTopCurrency ? (\r\n            <i data-testid=\"blinking-line-primary\"></i>\r\n          ) : isActive === \"secondary\" && !isTopCurrency ? (\r\n            <i data-testid=\"blinking-line-secondary\"></i>\r\n          ) : null}\r\n          {exceedsBalance()}\r\n        </CursorAndInput>\r\n      </div>\r\n    </CurrencyWrapper>\r\n  );\r\n};\r\n\r\nexport default CurrencyScreen;\r\n","export const dispatchActiveInput = (isTopCurrency, dispatch) => {\r\n  if (isTopCurrency) {\r\n    dispatch({\r\n      type: \"SET_ACTIVE_INPUT\",\r\n      payload: \"primary\",\r\n    });\r\n  } else {\r\n    dispatch({\r\n      type: \"SET_ACTIVE_INPUT\",\r\n      payload: \"secondary\",\r\n    });\r\n  }\r\n};\r\n\r\nexport const validateCurrency = (\r\n  value,\r\n  isTopCurrency,\r\n  activeRate,\r\n  dispatch\r\n) => {\r\n  if (/^\\d+(\\.\\d{1,2})?$/.test(value)) {\r\n    if (isTopCurrency) {\r\n      dispatch({\r\n        type: \"SET_FIRST_VALUE\",\r\n        payload: value,\r\n      });\r\n      const secondValue = Math.round(100 * (value * activeRate)) / 100;\r\n\r\n      dispatch({\r\n        type: \"SET_SECOND_VALUE\",\r\n        payload: secondValue,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: \"SET_SECOND_VALUE\",\r\n        payload: value,\r\n      });\r\n\r\n      const firstValue = Math.round(100 * (value / activeRate)) / 100;\r\n      dispatch({\r\n        type: \"SET_FIRST_VALUE\",\r\n        payload: firstValue,\r\n      });\r\n    }\r\n  } else if (value.length === 0) {\r\n    dispatch({\r\n      type: \"SET_FIRST_VALUE\",\r\n      payload: \"\",\r\n    });\r\n    dispatch({\r\n      type: \"SET_SECOND_VALUE\",\r\n      payload: \"\",\r\n    });\r\n  } else {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const toggleChangePanel = (isTopCurrency, globalState, dispatch) => {\r\n  let calledFromTop;\r\n  if (isTopCurrency) {\r\n    calledFromTop = true;\r\n  }\r\n  dispatch({\r\n    type: \"TOGGLE_CHANGE_PANEL\",\r\n    payload: {\r\n      isCalledFromTop: calledFromTop,\r\n      active: !globalState.changePanelActive.active,\r\n    },\r\n  });\r\n};\r\n","export default __webpack_public_path__ + \"static/media/currency-placeholder.08fefa87.png\";","export const swipeCurrencies = (\r\n  pocket,\r\n  firstSelectedPocket,\r\n  secondSelectedPocket,\r\n  changePanelActive,\r\n  dispatch\r\n) => {\r\n  if (firstSelectedPocket.name === pocket.name) {\r\n    dispatch({\r\n      type: \"CHANGE_SECOND_CURRENCY\",\r\n      payload: {\r\n        value: firstSelectedPocket.value,\r\n        name: firstSelectedPocket.name,\r\n      },\r\n    });\r\n    dispatch({\r\n      type: \"CHANGE_FIRST_CURRENCY\",\r\n      payload: {\r\n        value: secondSelectedPocket.value,\r\n        name: secondSelectedPocket.name,\r\n      },\r\n    });\r\n  }\r\n  if (\r\n    firstSelectedPocket.name !== pocket.name &&\r\n    changePanelActive.isCalledFromTop\r\n  ) {\r\n    if (secondSelectedPocket.name === pocket.name) {\r\n      dispatch({\r\n        type: \"CHANGE_SECOND_CURRENCY\",\r\n        payload: {\r\n          value: firstSelectedPocket.value,\r\n          name: firstSelectedPocket.name,\r\n        },\r\n      });\r\n    }\r\n    dispatch({\r\n      type: \"CHANGE_FIRST_CURRENCY\",\r\n      payload: {\r\n        value: pocket.value,\r\n        name: pocket.name,\r\n      },\r\n    });\r\n  }\r\n  if (\r\n    secondSelectedPocket.name !== pocket.name &&\r\n    !changePanelActive.isCalledFromTop\r\n  ) {\r\n    dispatch({\r\n      type: \"CHANGE_SECOND_CURRENCY\",\r\n      payload: {\r\n        value: pocket.value,\r\n        name: pocket.name,\r\n      },\r\n    });\r\n  }\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport CurrencyFlag from \"react-currency-flags\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  revolutBlue,\r\n  revolutGrey0,\r\n  revolutWhite,\r\n} from \"../../styles/variables\";\r\nimport { CurrencyContext } from \"../Providers/Provider\";\r\nimport CurrencyPlaceholder from \"../../assets/images/currency-placeholder.png\";\r\nimport { swipeCurrencies } from \"../../utils/swipeCurrencies\";\r\n\r\nconst SelectionWrapper = styled.div`\r\n  background-color: ${revolutGrey0};\r\n  border-top-left-radius: 15px;\r\n  border-top-right-radius: 15px;\r\n  width: 94%;\r\n  margin: 0 auto;\r\n  animation-name: appear;\r\n  animation-duration: 500ms;\r\n  opacity: 1;\r\n  text-align: left;\r\n  @keyframes appear {\r\n    0% {\r\n      opacity: 0;\r\n    }\r\n    25% {\r\n      opacity: 0.2;\r\n    }\r\n    50% {\r\n      opacity: 0.5;\r\n    }\r\n    75% {\r\n      opacity: 0.7;\r\n    }\r\n    100% {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ListElement = styled.li`\r\n  list-style: none;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-top: 20px;\r\n  padding-bottom: 20px;\r\n  padding-left: 15px;\r\n  border-bottom-width: 1px;\r\n  border-bottom-style: solid;\r\n  border-bottom-color: #2b2b2d;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst SpanElement = styled.span`\r\n  font-size: 26px;\r\n  color: ${revolutBlue};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst OtherCurrenciesImage = styled.img`\r\n  width: 55px;\r\n  height: 55px;\r\n  margin-right: 25px;\r\n  background: ${revolutWhite};\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst Title = styled.h4`\r\n  font-size: 20px;\r\n  padding-left: 20px;\r\n  padding-top: 30px;\r\n  color: #7a7a7c;\r\n  font-weight: 500;\r\n  border-bottom-width: 1px;\r\n  border-bottom-style: solid;\r\n  border-bottom-color: #2b2b2d;\r\n  margin-bottom: 0;\r\n  padding-bottom: 30px;\r\n`;\r\n\r\nconst SelectedBox = () => {\r\n  const { globalState, dispatch } = useContext(CurrencyContext);\r\n\r\n  const getPockets = () => {\r\n    return globalState.pockets.map((pocket, index) => {\r\n      const {\r\n        firstSelectedPocket,\r\n        secondSelectedPocket,\r\n        changePanelActive,\r\n      } = globalState;\r\n      return (\r\n        <ListElement\r\n          key={index}\r\n          onClick={() =>\r\n            swipeCurrencies(\r\n              pocket,\r\n              firstSelectedPocket,\r\n              secondSelectedPocket,\r\n              changePanelActive,\r\n              dispatch\r\n            )\r\n          }\r\n        >\r\n          <CurrencyFlag\r\n            currency={pocket.name}\r\n            width={55}\r\n            height={55}\r\n            style={{\r\n              borderRadius: \"50%\",\r\n              backgroundPosition: \"center\",\r\n              marginRight: \"25px\",\r\n            }}\r\n          />\r\n          <SpanElement\r\n            data-testid={`currencie-${pocket.name}`}\r\n            onClick={() => {\r\n              dispatch({\r\n                type: \"TOGGLE_CHANGE_PANEL\",\r\n                payload: {\r\n                  active: false,\r\n                  isCalledFromTop:\r\n                    globalState.changePanelActive.isCalledFromTop,\r\n                },\r\n              });\r\n            }}\r\n          >\r\n            {pocket.name} · {pocket.value}\r\n          </SpanElement>\r\n        </ListElement>\r\n      );\r\n    });\r\n  };\r\n\r\n  return globalState.changePanelActive.active ? (\r\n    <>\r\n      <SelectionWrapper>\r\n        <Title>Choose currency:</Title>\r\n        <div>\r\n          <ul\r\n            style={{\r\n              padding: 0,\r\n            }}\r\n          >\r\n            {getPockets()}\r\n            <ListElement>\r\n              <OtherCurrenciesImage\r\n                src={CurrencyPlaceholder}\r\n                alt=\"other currencies\"\r\n              />\r\n              <SpanElement\r\n                data-testid=\"toggle-other-panel\"\r\n                onClick={() => {\r\n                  dispatch({\r\n                    type: \"TOGGLE_OTHER_CURRENCIES\",\r\n                  });\r\n                  dispatch({\r\n                    type: \"TOGGLE_CHANGE_PANEL\",\r\n                    payload: {\r\n                      active: false,\r\n                      isCalledFromTop:\r\n                        globalState.changePanelActive.isCalledFromTop,\r\n                    },\r\n                  });\r\n                }}\r\n              >\r\n                Other\r\n              </SpanElement>\r\n            </ListElement>\r\n          </ul>\r\n        </div>\r\n      </SelectionWrapper>\r\n      <SelectionWrapper\r\n        style={{\r\n          textAlign: \"center\",\r\n          padding: \"15px 0\",\r\n          borderRadius: \"15px\",\r\n        }}\r\n      >\r\n        <SpanElement\r\n          onClick={() => {\r\n            dispatch({\r\n              type: \"TOGGLE_CHANGE_PANEL\",\r\n              payload: {\r\n                active: false,\r\n                isCalledFromTop: globalState.changePanelActive.isCalledFromTop,\r\n              },\r\n            });\r\n          }}\r\n        >\r\n          Cancel\r\n        </SpanElement>\r\n      </SelectionWrapper>\r\n    </>\r\n  ) : null;\r\n};\r\n\r\nexport default SelectedBox;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { CrossSmall, Search } from \"@revolut/icons\";\r\nimport CurrencyFlag from \"react-currency-flags\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  revolutGrey0,\r\n  revolutGrey10,\r\n  revolutWhite,\r\n} from \"../../styles/variables\";\r\nimport { CurrencyContext } from \"../Providers/Provider\";\r\nimport { swipeCurrencies } from \"../../utils/swipeCurrencies\";\r\n\r\nconst Wrapper = styled.div`\r\n  background-color: ${revolutGrey0};\r\n  border-top-left-radius: 15px;\r\n  border-top-right-radius: 15px;\r\n  width: 98%;\r\n  margin: 0 auto;\r\n  margin-top: 10px;\r\n  animation-name: appear;\r\n  animation-duration: 500ms;\r\n  opacity: 1;\r\n  text-align: left;\r\n  @keyframes appear {\r\n    0% {\r\n      opacity: 0;\r\n    }\r\n    25% {\r\n      opacity: 0.2;\r\n    }\r\n    50% {\r\n      opacity: 0.5;\r\n    }\r\n    75% {\r\n      opacity: 0.7;\r\n    }\r\n    100% {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ListElement = styled.li`\r\n  list-style: none;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-top: 20px;\r\n  padding-bottom: 20px;\r\n  padding-left: 15px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst InfoElement = styled.div`\r\n  font-size: 24px;\r\n  color: ${revolutWhite};\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  line-height: 1.4;\r\n  & > span {\r\n    font-size: 14px;\r\n    color: ${revolutGrey10};\r\n  }\r\n`;\r\n\r\nconst TitleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\nconst Title = styled.h4`\r\n  font-size: 17px;\r\n  color: ${revolutWhite};\r\n`;\r\nconst OtherSelectionBoxStyle = styled.div`\r\n  top: -500px;\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nconst OtherWrapper = styled.div`\r\n  padding-top: 25px;\r\n  padding-bottom: 25px;\r\n  height: 400px;\r\n  overflow: auto;\r\n`;\r\n\r\nconst SelectionSpan = styled.div`\r\n  padding: 0 15px;\r\n  font-size: 16px;\r\n  color: ${revolutGrey10};\r\n  font-weight: 600;\r\n`;\r\n\r\nconst OtherCountryList = styled.ul`\r\n  padding: 0;\r\n`;\r\nconst PocketList = styled.ul`\r\npadding: 0;\r\noverflow: auto,\r\nmax-height: 650px,\r\n`;\r\nconst OtherSelectionBox = () => {\r\n  const { globalState, dispatch } = useContext(CurrencyContext);\r\n  const [countries, setCountries] = useState({});\r\n  const {\r\n    firstSelectedPocket,\r\n    secondSelectedPocket,\r\n    changePanelActive,\r\n  } = globalState;\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://openexchangerates.org/api/currencies.json\")\r\n      .then((res) => res.json())\r\n      .then((json) => setCountries(json));\r\n  }, []);\r\n\r\n  const getPockets = () => {\r\n    return globalState.pockets.map((pocket, index) => {\r\n      return (\r\n        <ListElement key={index}>\r\n          <CurrencyFlag\r\n            currency={pocket.name}\r\n            width={55}\r\n            height={55}\r\n            style={{\r\n              borderRadius: \"50%\",\r\n              backgroundPosition: \"center\",\r\n              marginRight: \"25px\",\r\n            }}\r\n          />\r\n          <InfoElement>\r\n            {pocket.name} · {pocket.value}\r\n            <span>{pocket.fullName}</span>\r\n          </InfoElement>\r\n        </ListElement>\r\n      );\r\n    });\r\n  };\r\n\r\n  const getOtherCountries = () => {\r\n    const checkIfExists = {};\r\n    globalState.pockets.forEach((pocket) => {\r\n      if (checkIfExists[pocket.name]) {\r\n        return;\r\n      } else {\r\n        checkIfExists[pocket.name] = pocket.value;\r\n      }\r\n    });\r\n\r\n    return Object.keys(countries).map((oneKey, i) => {\r\n      if (checkIfExists[oneKey]) {\r\n        return (\r\n          <ListElement key={i} data-testid=\"test\">\r\n            <CurrencyFlag\r\n              currency={oneKey}\r\n              width={55}\r\n              height={55}\r\n              style={{\r\n                borderRadius: \"50%\",\r\n                backgroundPosition: \"center\",\r\n                marginRight: \"25px\",\r\n              }}\r\n            />\r\n            <InfoElement>\r\n              {oneKey} · {checkIfExists[oneKey]}\r\n              <span>{countries[oneKey]}</span>\r\n            </InfoElement>\r\n          </ListElement>\r\n        );\r\n      } else {\r\n        return (\r\n          <ListElement key={i}>\r\n            <CurrencyFlag\r\n              currency={oneKey}\r\n              width={55}\r\n              height={55}\r\n              style={{\r\n                borderRadius: \"50%\",\r\n                backgroundPosition: \"center\",\r\n                marginRight: \"25px\",\r\n              }}\r\n            />\r\n            <InfoElement\r\n              data-testid={`currencie-${oneKey}`}\r\n              onClick={() => {\r\n                swipeCurrencies(\r\n                  { name: oneKey, value: \"0.00\" },\r\n                  firstSelectedPocket,\r\n                  secondSelectedPocket,\r\n                  changePanelActive,\r\n                  dispatch\r\n                );\r\n                dispatch({\r\n                  type: \"TOGGLE_CHANGE_PANEL\",\r\n                  payload: {\r\n                    isCalledFromTop:\r\n                      globalState.changePanelActive.isCalledFromTop,\r\n                    active: false,\r\n                  },\r\n                });\r\n                dispatch({\r\n                  type: \"TOGGLE_OTHER_CURRENCIES\",\r\n                });\r\n              }}\r\n            >\r\n              {oneKey} · {\"0.00\"}\r\n              <span>{countries[oneKey]}</span>\r\n            </InfoElement>\r\n          </ListElement>\r\n        );\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <OtherSelectionBoxStyle data-testid=\"other-selection-box\">\r\n      <Wrapper>\r\n        <TitleWrapper>\r\n          <CrossSmall\r\n            data-testid=\"close-other-currencies\"\r\n            size=\"48\"\r\n            color=\"white\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n            }}\r\n            onClick={() => {\r\n              dispatch({\r\n                type: \"TOGGLE_OTHER_CURRENCIES\",\r\n              });\r\n            }}\r\n          />\r\n          <Title>Choose currency</Title>\r\n          <Search\r\n            size=\"24\"\r\n            color=\"white\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              paddingRight: \"10px\",\r\n            }}\r\n          />\r\n        </TitleWrapper>\r\n\r\n        <div\r\n          style={{\r\n            paddingTop: \"25px\",\r\n          }}\r\n        >\r\n          <SelectionSpan>Recently used</SelectionSpan>\r\n          <PocketList>{getPockets()}</PocketList>\r\n        </div>\r\n        <OtherWrapper>\r\n          <SelectionSpan>Other</SelectionSpan>\r\n          <OtherCountryList>\r\n            <div data-testid=\"other-currencies\"> {getOtherCountries()}</div>\r\n          </OtherCountryList>\r\n        </OtherWrapper>\r\n      </Wrapper>\r\n    </OtherSelectionBoxStyle>\r\n  );\r\n};\r\n\r\nexport default OtherSelectionBox;\r\n","import React, { useContext } from \"react\";\r\nimport { ArrowRightLeft } from \"@revolut/icons\";\r\nimport { CurrencyContext } from \"../../components/Providers/Provider\";\r\nconst Swap = () => {\r\n  const { globalState, dispatch } = useContext(CurrencyContext);\r\n  const { firstSelectedPocket, secondSelectedPocket } = globalState;\r\n\r\n  return (\r\n    <ArrowRightLeft\r\n      data-testid=\"swap\"\r\n      color=\"primary\"\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        borderRadius: \"50%\",\r\n        padding: \"5px\",\r\n        position: \"relative\",\r\n        top: \"58px\",\r\n        transform: \"translate(-50%, -50%) rotate(90deg)\",\r\n        left: \"5%\",\r\n        cursor: \"pointer\",\r\n      }}\r\n      size=\"16\"\r\n      onClick={() => {\r\n        dispatch({\r\n          type: \"CHANGE_SECOND_CURRENCY\",\r\n          payload: {\r\n            value: firstSelectedPocket.value,\r\n            name: firstSelectedPocket.name,\r\n          },\r\n        });\r\n        dispatch({\r\n          type: \"CHANGE_FIRST_CURRENCY\",\r\n          payload: {\r\n            value: secondSelectedPocket.value,\r\n            name: secondSelectedPocket.name,\r\n          },\r\n        });\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Swap;\r\n","import React, { useEffect, useContext, useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { ArrowRates } from \"@revolut/icons\";\r\nimport { revolutBlue } from \"../../styles/variables\";\r\nimport { CurrencyContext } from \"../Providers/Provider\";\r\nconst WrapperRates = styled.div`\r\n  position: relative;\r\n  top: 30px;\r\n  left: 50%;\r\n  transform: translate(-50%, -14px);\r\n  background: white;\r\n  color: ${revolutBlue};\r\n  font-weight: 500;\r\n  padding: 8px;\r\n  border-radius: 15px;\r\n  font-size: 13px;\r\n  display: flex;\r\n  width: fit-content;\r\n`;\r\nconst Rates = () => {\r\n  const { globalState, dispatch } = useContext(CurrencyContext);\r\n  const { firstSelectedPocket, secondSelectedPocket, activeRate } = globalState;\r\n  const fetchIndex = useCallback(() => {\r\n    fetch(\r\n      `https://api.exchangerate.host/latest?base=${firstSelectedPocket.name}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        Object.keys(json.rates).forEach((item) => {\r\n          if (item === secondSelectedPocket.name) {\r\n            dispatch({\r\n              type: \"SET_ACTIVE_RATE\",\r\n              payload: json.rates[item],\r\n            });\r\n          }\r\n        });\r\n      });\r\n  }, [dispatch, firstSelectedPocket.name, secondSelectedPocket.name]);\r\n\r\n  useEffect(() => {\r\n    fetchIndex();\r\n    const interval = setInterval(() => {\r\n      fetchIndex();\r\n    }, 10000);\r\n    return () => clearInterval(interval);\r\n  }, [fetchIndex]);\r\n\r\n  return (\r\n    <WrapperRates>\r\n      <ArrowRates\r\n        color=\"primary\"\r\n        size=\"16\"\r\n        style={{\r\n          marginRight: \"5px\",\r\n        }}\r\n      />\r\n      <span data-testid=\"rates\">\r\n        {firstSelectedPocket.name} 1 = {secondSelectedPocket.name} {activeRate}\r\n      </span>\r\n    </WrapperRates>\r\n  );\r\n};\r\n\r\nexport default Rates;\r\n","import { AutoExchange } from '@revolut/icons'\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { revolutGrey10, RevolutTopBarBlack10, revolutWhite, secondaryBold } from '../../styles/variables';\r\n\r\n\r\nconst Wrapper = styled.div`\r\n    display:flex;\r\n    flex-direction: row;\r\n    height: 77px;\r\n    max-heigh: 77px;\r\n    background-color: ${RevolutTopBarBlack10};\r\n    border-bottom-width: 1px;\r\n    border-bottom-style: solid;\r\n    border-bottom-color: grey;\r\n    color: ${revolutWhite};\r\n    font-weight: ${secondaryBold};\r\n    font-size: 24px;\r\n    padding:0 25px;\r\n    \r\n`\r\n\r\nconst Title = styled.span`\r\n    flex-grow: 0.67;\r\n    align-self: center;\r\n    text-align: right;\r\n\r\n`\r\n\r\nconst AutoExchangeWrapper = styled.div`\r\n    display: flex;\r\n    align-self: center;\r\n    flex-grow: 0.33;\r\n    justify-content: flex-end;\r\n    & > span {\r\n        color: ${revolutGrey10};\r\n        padding-right: 15px;\r\n    }\r\n`\r\nconst TopBar = () => {\r\n    return (\r\n        <Wrapper>\r\n        <Title>Exchange</Title>\r\n        <AutoExchangeWrapper><span>Auto </span><AutoExchange color='primary' size='32'/></AutoExchangeWrapper>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default TopBar;","import { useReducer } from \"react\";\nimport {\n  PhoneScreen,\n  ExchangeScreen,\n  OtherSelectionBox,\n  SelectedBox,\n} from \"./components\";\nimport {\n  CurrencyContext,\n  InitialState,\n  reducers,\n} from \"./components/Providers/Provider\";\nimport TopBar from \"./components/TopBar/TopBar\";\n\nimport \"./App.css\";\nimport \"./styles/_variables.scss\";\n\nfunction App() {\n  const [globalState, dispatch] = useReducer(reducers, InitialState);\n  return (\n    <CurrencyContext.Provider value={{ globalState, dispatch }}>\n      <PhoneScreen>\n        <TopBar />\n        <ExchangeScreen />\n        <SelectedBox />\n        {globalState.toggleOtherCurrencies && <OtherSelectionBox />}\n      </PhoneScreen>\n    </CurrencyContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}